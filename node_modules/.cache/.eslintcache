[{"/Users/sebastien/DevSDIS/djangoReactAdmin/src/index.js":"1","/Users/sebastien/DevSDIS/djangoReactAdmin/src/App.js":"2","/Users/sebastien/DevSDIS/djangoReactAdmin/src/reportWebVitals.js":"3","/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/dashBoard.js":"4","/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/Template/accountTemplate.js":"5","/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/Template/addAccountTemplate.js":"6","/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/Template/groupTemplate.js":"7","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/index.js":"8","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/App.js":"9","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/reportWebVitals.js":"10","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/dashBoard.js":"11","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/Template/addAccountTemplate.js":"12","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/Template/groupTemplate.js":"13","/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/Template/accountTemplate.js":"14"},{"size":496,"mtime":1617184153416,"results":"15","hashOfConfig":"16"},{"size":193,"mtime":1617090916533,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1617005900899,"results":"18","hashOfConfig":"16"},{"size":12152,"mtime":1617695567385,"results":"19","hashOfConfig":"16"},{"size":9742,"mtime":1617287740252,"results":"20","hashOfConfig":"16"},{"size":4178,"mtime":1617285151692,"results":"21","hashOfConfig":"16"},{"size":5538,"mtime":1617694860142,"results":"22","hashOfConfig":"16"},{"size":496,"mtime":1617184153416,"results":"23","hashOfConfig":"24"},{"size":193,"mtime":1617090916533,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1617005900899,"results":"26","hashOfConfig":"24"},{"size":12152,"mtime":1617695567385,"results":"27","hashOfConfig":"24"},{"size":4178,"mtime":1617285151692,"results":"28","hashOfConfig":"24"},{"size":5538,"mtime":1617694860142,"results":"29","hashOfConfig":"24"},{"size":9742,"mtime":1617287740252,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"19qsdme",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lenyys",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sebastien/DevSDIS/djangoReactAdmin/src/index.js",[],["62","63"],"/Users/sebastien/DevSDIS/djangoReactAdmin/src/App.js",[],"/Users/sebastien/DevSDIS/djangoReactAdmin/src/reportWebVitals.js",[],"/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/dashBoard.js",[],"/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/Template/accountTemplate.js",["64","65"],"import React from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  Grid,\n  DialogContent,\n  Button,\n  TextField,\n  Modal,\n  Slide,\n  Typography,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Container\n} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from \"axios\";\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 300,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogTable(props) {\n  const { selectedRow, open, city , onClickClose, setOpen, permissions, group } = props;\n  const [openModal, setOpenModal] = React.useState(false);\n  const [openModalDelete, setOpenModalDelete] = React.useState(false);\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [identity, setIdentity] = React.useState({\n    id: selectedRow.id,\n    firstName: selectedRow.firstName,\n    lastName: selectedRow.lastName,\n    email: selectedRow.email,\n    registrationNumber: selectedRow.registrationNumber,\n    cities: selectedRow.cities,\n  });\n  const [password, setPassword] = React.useState({\n    id: selectedRow.id,\n    oldPassword:null ,\n    password: null,\n  })\n\n  const handleOpen = () => {\n    setOpenModal(true);\n  };\n  const handleClose = () => {\n    setOpenModal(false);\n    setOpenModalDelete(false);\n  };\n  const handleChangePasswords = (event) => {\n    if (event.target.name === \"oldPassword\") {\n      password.oldPassword = event.target.value;\n      \n    } else {\n      password.password = event.target.value;\n      \n    }\n    setPassword(password);\n  };\n  const handleChangeIdentity = ( event) => {\n    if(event.target.name === \"firstName\") {\n      identity.firstName = event.target.value;\n    } else if(event.target.name === \"lastName\") {\n      identity.lastName = event.target.value;\n    }else if(event.target.name === \"email\"){\n      identity.email= event.target.value;\n    }else if (event.target.name === \"registrationNumber\"){\n      identity.registrationNumber = event.target.value;\n    }\n    setIdentity(identity);\n  };\n  const handleChangeCities =(event, value, reason) => {\n    identity.cities = value;\n    setIdentity(identity);\n\n  }\n  const putPasswordsApi = async ()=>{\n    console.log(\"putPassword\")\n    await axios.put('https://dev.geo.sdis67.com/api/v1/public/user', password);\n    setOpenModal(false)\n  };\n  const putIdentityApi = async ()=>{\n    console.log(\"putIdentity\")\n     await axios.put('https://dev.geo.sdis67.com/api/v1/public/user', identity);\n     setOpen(false);\n  };\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} >\n          <TextField\n            id=\"PWD\"\n            name=\"oldPassword\"\n            label=\"Ancien mot de passe\"\n            variant=\"outlined\"\n            onChange={(event )=>{handleChangePasswords(event)}}\n            fullWidth\n            required\n          />\n        </Grid>\n        <Grid item xs={12} >\n          <TextField\n            id=\"PWD1\"\n            name=\"password\"\n            label=\"changer de mot de passe\"\n            variant=\"outlined\"\n            onChange={( event )=>{handleChangePasswords(event)}}\n            fullWidth\n            required\n          />\n        </Grid>\n        <Grid item xs={12} >\n          <TextField\n            id=\"PWD2\"\n            name=\"PWD2\"\n            label=\"confirme nouveau mot de passe\"\n            variant=\"outlined\"\n            fullWidth\n            required\n          />\n        </Grid>\n      </Grid>\n      <Button autoFocus color=\"primary\" onClick={putPasswordsApi}>\n        Sauvegarder\n      </Button>\n    </div>\n  );\n const handleDeleteProfile = ()=> {\n   setOpenModalDelete(true);\n };\n const deleteProfile = async ()=> { \n  alert(\"profil supprim√© !!\");\n  setOpenModalDelete(false);\n  setOpen(false);\n};\n const bodyDelete = (\n    <div style={modalStyle} className={classes.paper}>\n      <p>Attention voulez vous vraiment supprimer ce compte ?</p>\n      <Button autoFocus color=\"primary\" onClick={deleteProfile}>\n        Suppression\n      </Button>\n    </div>\n  );\n  \n  return (\n    <div style={{ maxWidth: \"100%\" }}>\n      {selectedRow && (\n        <Dialog\n          fullScreen\n          open={open}\n          onClose={onClickClose}\n          TransitionComponent={Transition}\n          fullWidth\n        >\n          <AppBar className={classes.appBar}>\n          <Toolbar>\n            <DialogActions>\n              <IconButton edge=\"start\" color=\"inherit\" onClick={onClickClose} aria-label=\"close\">\n                <CloseIcon />\n              </IconButton>\n              <Typography variant=\"h6\"gutterBottom className={classes.title}>Modifier un profil</Typography>\n              <Button autoFocus color=\"inherit\" onClick={putIdentityApi}>\n                Sauvegarder\n              </Button>\n              <IconButton  color=\"inherit\" onClick={handleDeleteProfile} aria-label=\"delete\">\n                <DeleteForeverOutlinedIcon />\n              </IconButton>\n            </DialogActions>\n          </Toolbar>\n        </AppBar>\n\n          <DialogContent>\n            <Container maxWidth=\"xl\">\n              <Typography variant=\"h6\"gutterBottom>Informations personnelles</Typography>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    label=\"Pr√©nom\"\n                    fullWidth\n                    variant=\"outlined\"\n                    defaultValue={selectedRow.firstName}\n                    onChange={(event )=>{handleChangeIdentity( event)}}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    label=\"Nom\"\n                    variant=\"outlined\"\n                    defaultValue={selectedRow.lastName}\n                    onChange={( event )=>{handleChangeIdentity(event)}}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    id=\"eMail\"\n                    name=\"email\"\n                    label=\"Email\"\n                    variant=\"outlined\"\n                    defaultValue={selectedRow.email}\n                    onChange={( event )=>{handleChangeIdentity( event)}}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    id=\"average\"\n                    name=\"average\"\n                    label=\"Moyenne\"\n                    fullWidth\n                    variant=\"outlined\"\n                    defaultValue={selectedRow.average}\n                    disabled\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    id=\"registrationNumber\"\n                    name=\"registrationNumber\"\n                    label=\"Matricule\"\n                    variant=\"outlined\"\n                    defaultValue={selectedRow.registrationNumber}\n                    onChange={( event )=>{handleChangeIdentity(event)}}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Autocomplete\n                    multiple\n                    id=\"cities\"\n                    name=\"cities\"\n                    options={city}\n                    getOptionLabel={(option) => option.name}\n                    defaultValue={selectedRow.cities[0] &&[selectedRow.cities[0]]}\n                    onChange={(event, value, reason)=>{handleChangeCities(event, value, reason)}}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label=\"Villes\"\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <button type=\"button\" onClick={handleOpen}>\n                    changer de Mot de passe\n                  </button>\n                </Grid>\n              </Grid>\n              <Modal\n                  open={openModal}\n                  onClose={handleClose}\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                >\n                  {body}\n                </Modal>\n                <Modal\n                  open={openModalDelete}\n                  onClose={handleClose}\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                >\n                  {bodyDelete}\n                </Modal>\n            </Container>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/Template/addAccountTemplate.js",["66","67"],"import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Container from '@material-ui/core/Container';\n\nexport default function AddAccountTemplate(props) {\n  const { city, changeCities, changeProfils, permissions, group} = props;\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"xl\">\n      <Typography variant=\"subtitle1\" gutterBottom>\n        Informations personnelles\n        </Typography>\n        <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"username\"\n              name=\"username\"\n              label=\"Username\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"firstName\"\n              name=\"firstName\"\n              label=\"Pr√©nom\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"lastName\"\n              name=\"lastName\"\n              label=\"Nom\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}sm={6}>\n            <TextField\n              required\n              id=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"password\"\n              name=\"password\"\n              label=\"Mot de passe\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField \n              required \n              id=\"confirmPassword\" \n              name=\"confirmPassword\" \n              label=\"confirme ton mot de passe\" \n              fullWidth \n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}sm={6}>\n            <Autocomplete\n              multiple\n              id=\"cities\"\n              name=\"cities\"\n              options={city}\n              getOptionLabel={(option) => option.name}\n              onChange={(event, value, reason)=>{changeCities(event, value, reason)}}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  label=\"Villes\"\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"registerNumber\"\n              name=\"registrationNumber\"\n              label=\"Matricul\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"company\"\n              name=\"company\"\n              label=\"Company\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              required\n              id=\"territorialUnity\"\n              name=\"territorialUnity\"\n              label=\"Unit√© territorial\"\n              fullWidth\n              onChange={( event)=>{changeProfils(event)}}\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}","/Users/sebastien/DevSDIS/djangoReactAdmin/src/components/Template/groupTemplate.js",[],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/index.js",[],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/App.js",[],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/reportWebVitals.js",[],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/dashBoard.js",[],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/Template/addAccountTemplate.js",["68","69"],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/Template/groupTemplate.js",[],"/Users/sebastien/DevSDIS/SignalementReactAdmin/src/components/Template/accountTemplate.js",["70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":59,"column":60,"nodeType":"78","messageId":"79","endLine":59,"endColumn":71},{"ruleId":"76","severity":1,"message":"80","line":59,"column":73,"nodeType":"78","messageId":"79","endLine":59,"endColumn":78},{"ruleId":"76","severity":1,"message":"77","line":9,"column":46,"nodeType":"78","messageId":"79","endLine":9,"endColumn":57},{"ruleId":"76","severity":1,"message":"80","line":9,"column":59,"nodeType":"78","messageId":"79","endLine":9,"endColumn":64},{"ruleId":"76","severity":1,"message":"77","line":9,"column":46,"nodeType":"78","messageId":"79","endLine":9,"endColumn":57},{"ruleId":"76","severity":1,"message":"80","line":9,"column":59,"nodeType":"78","messageId":"79","endLine":9,"endColumn":64},{"ruleId":"76","severity":1,"message":"77","line":59,"column":60,"nodeType":"78","messageId":"79","endLine":59,"endColumn":71},{"ruleId":"76","severity":1,"message":"80","line":59,"column":73,"nodeType":"78","messageId":"79","endLine":59,"endColumn":78},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'permissions' is assigned a value but never used.","Identifier","unusedVar","'group' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]